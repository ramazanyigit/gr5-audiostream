spring:
  application:
    name: collection-api
  jpa:
    database: postgresql
    show-sql: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  datasource:
    url: ${DB_ADDR:jdbc:postgresql://localhost:5444/aa}
    username: ${DB_USER:gr5}
    password: ${DB_PASSWORD:gr5}
    driver-class-name: org.postgresql.Driver

  main:
    banner-mode: off

  kafka:
    consumer:
      bootstrap-servers: ${KAFKA_URI:localhost:29092}
      group-id: collection-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      bootstrap-servers: ${KAFKA_URI:localhost:29092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8763/auth/realms/audiostream
          jwk-set-uri: ${KEYCLOAK_URI:http://localhost:8763}/auth/realms/audiostream/protocol/openid-connect/certs

server:
  port: 0

eureka:
  instance:
    hostname: ${spring.application.name}
    instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
#    prefer-ip-address: true
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
    metadata-map:
      startup: ${random.int}

  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}